on:
  workflow_call:
    inputs:
      package:
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/${{ inputs.package }}-app

permissions:
  contents: read
  packages: write
  id-token: write
  attestations: write

jobs:
  build:
    name: Build and push Docker image for ${{ inputs.package }} app
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Self check
        run: |
          echo "Testing if Dockerfile exists"
          test -f configs/${{ inputs.package }}.dockerfile

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.package }}-app
          path: dist/

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}
            type=edge,branch=main
            type=ref,event=branch
            type=ref,event=pr

      - name: Determine Unix timestamp of commit
        id: timestamp
        run: |
          echo "Determining Unix timestamp"
          echo "Commit SHA: ${GITHUB_SHA}"
          echo "Commit subject: $( git log --format='%s' -n 1 ${GITHUB_SHA} )"
          echo "Timestamp is $( git log --format='%cD' -n 1 ${GITHUB_SHA} )"
          echo "timestamp=$( git log --format='%ct' -n 1 ${GITHUB_SHA} )" >> "$GITHUB_OUTPUT"

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v5
        with:
          context: dist/
          file: configs/${{ inputs.package }}.dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
        env:
          SOURCE_DATE_EPOCH: ${{ steps.timestamp.output.timestamp }}

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
